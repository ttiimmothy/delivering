name: cicd pipeline

on:
  pull_request:
    branches: [ main, production ]

permissions:
  contents: read
  security-events: write
  actions: read

# env:
#   NODE_VERSION: '22'

jobs:
  # Client Tests
  client-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        # with:
        #   node-version: ${{ env.NODE_VERSION }}
        #   cache: 'npm'
        #   cache-dependency-path: client/package-lock.json

      - name: Install client dependencies
        working-directory: client
        run: npm ci

      - name: Run client linting
        working-directory: client
        run: npm run lint

      - name: Run client type checking
        working-directory: client
        run: npm run typecheck

      - name: Run client tests
        working-directory: client
        run: npm test -- --coverage

      - name: Build client
        working-directory: client
        run: npm run build

  # Server Tests
  server-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: delivering_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:8-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        # with:
        #   node-version: ${{ env.NODE_VERSION }}
        #   cache: 'npm'
        #   cache-dependency-path: server/package-lock.json

      - name: Install server dependencies
        working-directory: server
        run: npm ci

      - name: Run server linting
        working-directory: server
        run: npm run lint

      - name: Run server type checking
        working-directory: server
        run: npm run typecheck

      - name: Run database migrations
        working-directory: server
        run: npm run migrate
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: delivering_test

      - name: Seed test database
        working-directory: server
        run: npm run seed
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: delivering_test

      - name: Run server tests
        working-directory: server
        run: npm test -- --coverage
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: delivering_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          JWT_REFRESH_SECRET: test-refresh-secret

      - name: Build server
        working-directory: server
        run: npm run build

  # Integration Tests
  # integration-test:
  #   name: integration-test
  #   runs-on: ubuntu-latest
  #   needs: [client-test, server-test]
  #   services:
  #     postgres:
  #       image: postgres:17
  #       env:
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: delivering_integration
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432

  #     redis:
  #       image: redis:7-alpine
  #       options: >-
  #         --health-cmd "redis-cli ping"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 6379:6379

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: |
  #         npm ci
  #         cd server && npm ci
  #         cd ../client && npm ci

  #     - name: Start services with Docker Compose
  #       run: |
  #         docker-compose -f docker-compose.test.yml up -d
  #       env:
  #         NODE_ENV: test

  #     - name: Wait for services to be ready
  #       run: |
  #         sleep 30
  #         curl -f http://localhost:4000/health || exit 1
  #         curl -f http://localhost:3000 || exit 1

  #     - name: Run integration tests
  #       run: |
  #         npm run test:integration
  #       env:
  #         NODE_ENV: test

  #     - name: Stop services
  #       if: always()
  #       run: |
  #         docker-compose -f docker-compose.test.yml down

  # Security Scan
  security-scan:
    name: security-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  # build-images:
  #   runs-on: ubuntu-latest
  #   needs: [client-test, server-test]
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Build and push server image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./server
  #         push: true
  #         tags: |
  #           ${{ secrets.DOCKER_USERNAME }}/delivering-server:latest
  #           ${{ secrets.DOCKER_USERNAME }}/delivering-server:${{ github.sha }}

  #     - name: Build and push client image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./client
  #         push: true
  #         tags: |
  #           ${{ secrets.DOCKER_USERNAME }}/delivering-client:latest
  #           ${{ secrets.DOCKER_USERNAME }}/delivering-client:${{ github.sha }}

  # # Deploy to Staging
  # deploy-staging:
  #   runs-on: ubuntu-latest
  #   needs: [integration-test, build-images]
  #   if: github.ref == 'refs/heads/develop'
  #   # environment: staging
  #   steps:
  #     - name: Deploy to staging
  #       run: |
  #         echo "Deploying to staging environment..."
  #         # Add your staging deployment commands here

  # # Deploy to Production
  # deploy-production:
  #   runs-on: ubuntu-latest
  #   needs: [integration-test, build-images]
  #   if: github.ref == 'refs/heads/main'
  #   # environment: production
  #   steps:
  #     - name: Deploy to production
  #       run: |
  #         echo "Deploying to production environment..."
  #         # Add your production deployment commands here
