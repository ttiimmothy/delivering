/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  mutation Login($input: LoginInput!) {\n    login(input: $input) {\n      user {\n        id\n        email\n        firstName\n        lastName\n        role\n        avatar\n        isActive\n        emailVerified\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.LoginDocument,
    "\n  mutation Signup($input: SignupInput!) {\n    signup(input: $input) {\n      user {\n        id\n        email\n        firstName\n        lastName\n        role\n        avatar\n        isActive\n        emailVerified\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.SignupDocument,
    "\n  mutation LoginWithGoogle($idToken: String!) {\n    loginWithGoogle(idToken: $idToken) {\n      user {\n        id\n        email\n        firstName\n        lastName\n        role\n        avatar\n        isActive\n        emailVerified\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.LoginWithGoogleDocument,
    "\n  mutation RefreshToken($refreshToken: String!) {\n    refreshToken {\n      message\n    }\n  }\n": typeof types.RefreshTokenDocument,
    "\n  mutation Logout {\n    logout {\n      message\n    }\n  }\n": typeof types.LogoutDocument,
    "\n  mutation UpdateUser($input: UpdateUserInput!) {\n    updateUser(input: $input) {\n      user{\n      id\n        email\n        firstName\n        lastName\n        phone\n        role\n        avatar\n        isActive\n        emailVerified\n        createdAt\n        updatedAt\n      }\n     \n    }\n  }\n": typeof types.UpdateUserDocument,
    "\n  query Me {\n    me {\n      id\n      email\n      firstName\n      lastName\n      phone\n      role\n      avatar\n      isActive\n      emailVerified\n      createdAt\n      updatedAt\n      courierProfile {\n        id\n        vehicleType\n        licensePlate\n        isAvailable\n        currentLocation\n        rating\n        reviewCount\n        totalDeliveries\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.MeDocument,
    "\n  query Restaurants(\n    $cuisine: String\n    $isOpen: Boolean\n    $limit: Int\n    $offset: Int\n    $search: String\n    $sortBy: String\n    $sortOrder: String\n  ) {\n    restaurants(\n      cuisine: $cuisine\n      isOpen: $isOpen\n      limit: $limit\n      offset: $offset\n      search: $search\n      sortBy: $sortBy\n      sortOrder: $sortOrder\n    ) {\n      id\n      name\n      slug\n      description\n      image\n      cuisine\n      rating\n      reviewCount\n      deliveryTime\n      deliveryFee\n      minimumOrder\n      isOpen\n      isActive\n      address {\n        street\n        city\n        state\n        zipCode\n        latitude\n        longitude\n      }\n      phone\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.RestaurantsDocument,
    "\n  query Restaurant($slug: String!) {\n    restaurant(slug: $slug) {\n      id\n      name\n      slug\n      description\n      image\n      cuisine\n      rating\n      reviewCount\n      deliveryTime\n      deliveryFee\n      minimumOrder\n      isOpen\n      isActive\n      address {\n        street\n        city\n        state\n        zipCode\n        latitude\n        longitude\n      }\n      phone\n      createdAt\n      updatedAt\n      menuCategories {\n        id\n        name\n        description\n        sortOrder\n        isActive\n        createdAt\n        updatedAt\n        menuItems {\n          id\n          name\n          description\n          image\n          price\n          isAvailable\n          isPopular\n          sortOrder\n          createdAt\n          updatedAt\n          options {\n            id\n            name\n            type\n            isRequired\n            sortOrder\n            createdAt\n            values {\n              id\n              name\n              price\n              isDefault\n              sortOrder\n              createdAt\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.RestaurantDocument,
    "\n  query FavoriteRestaurants {\n    favoriteRestaurants {\n      id\n      name\n      slug\n      description\n      image\n      cuisine\n      rating\n      reviewCount\n      deliveryTime\n      deliveryFee\n      minimumOrder\n      isOpen\n      isActive\n      address {\n        street\n        city\n        state\n        zipCode\n        latitude\n        longitude\n      }\n      phone\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.FavoriteRestaurantsDocument,
    "\n  mutation ToggleFavorite($restaurantId: String!) {\n    toggleFavorite(restaurantId: $restaurantId)\n  }\n": typeof types.ToggleFavoriteDocument,
    "\n  query Cart {\n    cart {\n      id\n      restaurantId\n      createdAt\n      updatedAt\n      items {\n        id\n        menuItemId\n        quantity\n        selectedOptions\n        specialInstructions\n        createdAt\n        updatedAt\n        menuItem {\n          id\n          name\n          description\n          image\n          price\n          isAvailable\n          isPopular\n          options {\n            id\n            name\n            type\n            isRequired\n            values {\n              id\n              name\n              price\n              isDefault\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.CartDocument,
    "\n  mutation AddToCart($input: AddToCartInput!) {\n    addToCart(input: $input) {\n      id\n      menuItemId\n      quantity\n      selectedOptions\n      specialInstructions\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.AddToCartDocument,
    "\n  mutation UpdateCartItem($input: UpdateCartItemInput!) {\n    updateCartItem(input: $input) {\n      id\n      quantity\n      selectedOptions\n      specialInstructions\n      updatedAt\n    }\n  }\n": typeof types.UpdateCartItemDocument,
    "\n  mutation RemoveFromCart($input: RemoveFromCartInput!) {\n    removeFromCart(input: $input)\n  }\n": typeof types.RemoveFromCartDocument,
    "\n  mutation ClearCart {\n    clearCart\n  }\n": typeof types.ClearCartDocument,
    "\n  query Orders($status: OrderStatus, $limit: Int, $offset: Int) {\n    orders(status: $status, limit: $limit, offset: $offset) {\n      id\n      orderNumber\n      status\n      paymentStatus\n      subtotal\n      tax\n      deliveryFee\n      tip\n      total\n      deliveryAddress\n      specialInstructions\n      estimatedDeliveryTime\n      createdAt\n      updatedAt\n      restaurant {\n        id\n        name\n        slug\n        image\n        phone\n      }\n      courier {\n        id\n        firstName\n        lastName\n        phone\n        courierProfile {\n          vehicleType\n          rating\n        }\n      }\n      items {\n        id\n        menuItemId\n        quantity\n        unitPrice\n        totalPrice\n        selectedOptions\n        specialInstructions\n        menuItem {\n          id\n          name\n          description\n          image\n        }\n      }\n      events {\n        id\n        eventType\n        description\n        metadata\n        createdAt\n      }\n    }\n  }\n": typeof types.OrdersDocument,
    "\n  query Order($id: String!) {\n    order(id: $id) {\n      id\n      orderNumber\n      status\n      paymentStatus\n      subtotal\n      tax\n      deliveryFee\n      tip\n      total\n      deliveryAddress\n      specialInstructions\n      estimatedDeliveryTime\n      createdAt\n      updatedAt\n      restaurant {\n        id\n        name\n        slug\n        image\n        phone\n        address {\n          street\n          city\n          state\n          zipCode\n        }\n      }\n      courier {\n        id\n        firstName\n        lastName\n        phone\n        courierProfile {\n          vehicleType\n          rating\n          currentLocation\n        }\n      }\n      items {\n        id\n        menuItemId\n        quantity\n        unitPrice\n        totalPrice\n        selectedOptions\n        specialInstructions\n        menuItem {\n          id\n          name\n          description\n          image\n        }\n      }\n      events {\n        id\n        eventType\n        description\n        metadata\n        createdAt\n      }\n    }\n  }\n": typeof types.OrderDocument,
    "\n  mutation PlaceOrder($input: CreateOrderInput!) {\n    placeOrder(input: $input) {\n      id\n      orderNumber\n      status\n      paymentStatus\n      total\n      estimatedDeliveryTime\n      createdAt\n    }\n  }\n": typeof types.PlaceOrderDocument,
    "\n  query CourierAssignments {\n    courierAssignments {\n      id\n      orderId\n      status\n      assignedAt\n      acceptedAt\n      pickedUpAt\n      deliveredAt\n      currentLocation\n      estimatedArrival\n      order {\n        id\n        orderNumber\n        status\n        total\n        deliveryAddress\n        specialInstructions\n        restaurant {\n          id\n          name\n          address {\n            street\n            city\n            state\n            zipCode\n            latitude\n            longitude\n          }\n        }\n        customer {\n          id\n          firstName\n          lastName\n          phone\n        }\n      }\n    }\n  }\n": typeof types.CourierAssignmentsDocument,
    "\n  mutation AcceptDelivery($deliveryId: String!) {\n    acceptDelivery(deliveryId: $deliveryId) {\n      id\n      status\n      acceptedAt\n    }\n  }\n": typeof types.AcceptDeliveryDocument,
    "\n  mutation PickupOrder($deliveryId: String!) {\n    pickupOrder(deliveryId: $deliveryId) {\n      id\n      status\n      pickedUpAt\n    }\n  }\n": typeof types.PickupOrderDocument,
    "\n  mutation DeliverOrder($deliveryId: String!) {\n    deliverOrder(deliveryId: $deliveryId) {\n      id\n      status\n      deliveredAt\n    }\n  }\n": typeof types.DeliverOrderDocument,
    "\n  mutation UpdateCourierLocation($input: UpdateCourierLocationInput!) {\n    updateCourierLocation(input: $input) {\n      id\n      userId\n      vehicleType\n      licensePlate\n      currentLocation\n      isAvailable\n      rating\n      reviewCount\n      totalDeliveries\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateCourierLocationDocument,
    "\n  query MerchantOrders($status: OrderStatus, $limit: Int, $offset: Int) {\n    merchantOrders(status: $status, limit: $limit, offset: $offset) {\n      id\n      orderNumber\n      status\n      paymentStatus\n      subtotal\n      tax\n      deliveryFee\n      tip\n      total\n      deliveryAddress\n      specialInstructions\n      estimatedDeliveryTime\n      createdAt\n      updatedAt\n      customer {\n        id\n        firstName\n        lastName\n        phone\n      }\n      courier {\n        id\n        firstName\n        lastName\n        phone\n      }\n      items {\n        id\n        menuItemId\n        quantity\n        unitPrice\n        totalPrice\n        selectedOptions\n        specialInstructions\n        menuItem {\n          id\n          name\n          description\n          image\n        }\n      }\n    }\n  }\n": typeof types.MerchantOrdersDocument,
    "\n  mutation ConfirmOrder($orderId: String!) {\n    confirmOrder(orderId: $orderId) {\n      id\n      status\n      updatedAt\n    }\n  }\n": typeof types.ConfirmOrderDocument,
    "\n  mutation SetRestaurantOpen($id: String!, $isOpen: Boolean!) {\n    setRestaurantOpen(id: $id, isOpen: $isOpen) {\n      id\n      isOpen\n      updatedAt\n    }\n  }\n": typeof types.SetRestaurantOpenDocument,
    "\n  query Reviews($restaurantId: String, $courierId: String, $limit: Int, $offset: Int) {\n    reviews(restaurantId: $restaurantId, courierId: $courierId, limit: $limit, offset: $offset) {\n      id\n      rating\n      comment\n      type\n      createdAt\n      updatedAt\n      customer {\n        id\n        firstName\n        lastName\n      }\n      restaurant {\n        id\n        name\n        slug\n      }\n      courier {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n": typeof types.ReviewsDocument,
    "\n  mutation CreateReview($input: CreateReviewInput!) {\n    createReview(input: $input) {\n      id\n      rating\n      comment\n      type\n      createdAt\n    }\n  }\n": typeof types.CreateReviewDocument,
    "\n  subscription OrderStatusChanged($orderId: String!) {\n    orderStatusChanged(orderId: $orderId) {\n      id\n      eventType\n      description\n      metadata\n      createdAt\n    }\n  }\n": typeof types.OrderStatusChangedDocument,
    "\n  subscription CourierLocation($deliveryId: String!) {\n    courierLocation(deliveryId: $deliveryId) {\n      courierId\n      deliveryId\n      location {\n        latitude\n        longitude\n        timestamp\n      }\n      estimatedArrival\n      updatedAt\n    }\n  }\n": typeof types.CourierLocationDocument,
    "\n  subscription MerchantIncomingOrders($restaurantId: String!) {\n    merchantIncomingOrders(restaurantId: $restaurantId) {\n      id\n      orderNumber\n      status\n      total\n      deliveryAddress\n      specialInstructions\n      createdAt\n      customer {\n        id\n        firstName\n        lastName\n        phone\n      }\n      items {\n        id\n        quantity\n        menuItem {\n          id\n          name\n          price\n        }\n      }\n    }\n  }\n": typeof types.MerchantIncomingOrdersDocument,
    "\n  mutation CreateCheckoutSession($input: CreateCheckoutSessionInput!) {\n    createCheckoutSession(input: $input) {\n      id\n      url\n      customerId\n      customerEmail\n      status\n      paymentIntentId\n      createdAt\n      expiresAt\n    }\n  }\n": typeof types.CreateCheckoutSessionDocument,
    "\n  mutation CreateBillingPortalSession($input: CreateBillingPortalSessionInput!) {\n    createBillingPortalSession(input: $input) {\n      id\n      url\n      returnUrl\n      createdAt\n    }\n  }\n": typeof types.CreateBillingPortalSessionDocument,
    "\n  mutation CreatePaymentIntent($input: CreatePaymentIntentInput!) {\n    createPaymentIntent(input: $input) {\n      id\n      status\n      amount\n      currency\n      clientSecret\n      description\n      createdAt\n      metadata\n    }\n  }\n": typeof types.CreatePaymentIntentDocument,
    "\n  mutation ConfirmPaymentIntent($paymentIntentId: String!) {\n    confirmPaymentIntent(paymentIntentId: $paymentIntentId) {\n      id\n      status\n      amount\n      currency\n      clientSecret\n      description\n      createdAt\n      metadata\n    }\n  }\n": typeof types.ConfirmPaymentIntentDocument,
    "\n  mutation CancelPaymentIntent($paymentIntentId: String!) {\n    cancelPaymentIntent(paymentIntentId: $paymentIntentId) {\n      id\n      status\n      amount\n      currency\n      clientSecret\n      description\n      createdAt\n      metadata\n    }\n  }\n": typeof types.CancelPaymentIntentDocument,
    "\n  mutation CreateRefund($input: CreateRefundInput!) {\n    createRefund(input: $input) {\n      id\n      status\n      amount\n      currency\n      reason\n      createdAt\n    }\n  }\n": typeof types.CreateRefundDocument,
    "\n  query PaymentIntent($paymentIntentId: String!) {\n    paymentIntent(paymentIntentId: $paymentIntentId) {\n      id\n      status\n      amount\n      currency\n      clientSecret\n      description\n      createdAt\n      metadata\n    }\n  }\n": typeof types.PaymentIntentDocument,
    "\n  subscription DeliveryAssigned($courierId: String!) {\n    deliveryAssigned(courierId: $courierId) {\n      deliveryId\n      courierId\n      courierId\n      assignedAt\n    }\n  }\n": typeof types.DeliveryAssignedDocument,
    "\n  subscription DeliveryStatusChanged($deliveryId: String!) {\n    deliveryStatusChanged(deliveryId: $deliveryId) {\n      deliveryId\n      status\n      message\n      updatedAt\n    }\n  }\n": typeof types.DeliveryStatusChangedDocument,
    "\n  subscription CourierStatusChanged {\n    courierStatusChanged {\n      courierId\n      isAvailable\n      updatedAt\n    }\n  }\n": typeof types.CourierStatusChangedDocument,
    "\n  subscription RealTimeOrderUpdates($orderId: String!) {\n    realTimeOrderUpdates(orderId: $orderId) {\n      orderId\n      status\n      message\n      metadata\n      updatedAt\n    }\n  }\n": typeof types.RealTimeOrderUpdatesDocument,
    "\n  subscription LiveCourierTracking($courierId: String!) {\n    liveCourierTracking(courierId: $courierId) {\n      courierId\n      deliveryId\n      location {\n        latitude\n        longitude\n        timestamp\n      }\n      estimatedArrival\n      updatedAt\n      status\n    }\n  }\n": typeof types.LiveCourierTrackingDocument,
    "\n  subscription RestaurantOrderQueue($restaurantId: String!) {\n    restaurantOrderQueue(restaurantId: $restaurantId) {\n      restaurantId\n      queueLength\n      pendingOrders {\n        id\n        orderNumber\n        status\n        total\n        createdAt\n        customer {\n          id\n          firstName\n          lastName\n        }\n      }\n      preparingOrders {\n        id\n        orderNumber\n        status\n        total\n        createdAt\n        customer {\n          id\n          firstName\n          lastName\n        }\n      }\n      readyOrders {\n        id\n        orderNumber\n        status\n        total\n        createdAt\n        customer {\n          id\n          firstName\n          lastName\n        }\n      }\n      updatedAt\n    }\n  }\n": typeof types.RestaurantOrderQueueDocument,
    "\n  subscription CustomerOrderTracking($orderId: String!) {\n    customerOrderTracking(orderId: $orderId) {\n      orderId\n      status\n      courierId\n      message\n      currentLocation\n      estimatedDelivery\n      updatedAt\n    }\n  }\n": typeof types.CustomerOrderTrackingDocument,
};
const documents: Documents = {
    "\n  mutation Login($input: LoginInput!) {\n    login(input: $input) {\n      user {\n        id\n        email\n        firstName\n        lastName\n        role\n        avatar\n        isActive\n        emailVerified\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.LoginDocument,
    "\n  mutation Signup($input: SignupInput!) {\n    signup(input: $input) {\n      user {\n        id\n        email\n        firstName\n        lastName\n        role\n        avatar\n        isActive\n        emailVerified\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.SignupDocument,
    "\n  mutation LoginWithGoogle($idToken: String!) {\n    loginWithGoogle(idToken: $idToken) {\n      user {\n        id\n        email\n        firstName\n        lastName\n        role\n        avatar\n        isActive\n        emailVerified\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.LoginWithGoogleDocument,
    "\n  mutation RefreshToken($refreshToken: String!) {\n    refreshToken {\n      message\n    }\n  }\n": types.RefreshTokenDocument,
    "\n  mutation Logout {\n    logout {\n      message\n    }\n  }\n": types.LogoutDocument,
    "\n  mutation UpdateUser($input: UpdateUserInput!) {\n    updateUser(input: $input) {\n      user{\n      id\n        email\n        firstName\n        lastName\n        phone\n        role\n        avatar\n        isActive\n        emailVerified\n        createdAt\n        updatedAt\n      }\n     \n    }\n  }\n": types.UpdateUserDocument,
    "\n  query Me {\n    me {\n      id\n      email\n      firstName\n      lastName\n      phone\n      role\n      avatar\n      isActive\n      emailVerified\n      createdAt\n      updatedAt\n      courierProfile {\n        id\n        vehicleType\n        licensePlate\n        isAvailable\n        currentLocation\n        rating\n        reviewCount\n        totalDeliveries\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.MeDocument,
    "\n  query Restaurants(\n    $cuisine: String\n    $isOpen: Boolean\n    $limit: Int\n    $offset: Int\n    $search: String\n    $sortBy: String\n    $sortOrder: String\n  ) {\n    restaurants(\n      cuisine: $cuisine\n      isOpen: $isOpen\n      limit: $limit\n      offset: $offset\n      search: $search\n      sortBy: $sortBy\n      sortOrder: $sortOrder\n    ) {\n      id\n      name\n      slug\n      description\n      image\n      cuisine\n      rating\n      reviewCount\n      deliveryTime\n      deliveryFee\n      minimumOrder\n      isOpen\n      isActive\n      address {\n        street\n        city\n        state\n        zipCode\n        latitude\n        longitude\n      }\n      phone\n      createdAt\n      updatedAt\n    }\n  }\n": types.RestaurantsDocument,
    "\n  query Restaurant($slug: String!) {\n    restaurant(slug: $slug) {\n      id\n      name\n      slug\n      description\n      image\n      cuisine\n      rating\n      reviewCount\n      deliveryTime\n      deliveryFee\n      minimumOrder\n      isOpen\n      isActive\n      address {\n        street\n        city\n        state\n        zipCode\n        latitude\n        longitude\n      }\n      phone\n      createdAt\n      updatedAt\n      menuCategories {\n        id\n        name\n        description\n        sortOrder\n        isActive\n        createdAt\n        updatedAt\n        menuItems {\n          id\n          name\n          description\n          image\n          price\n          isAvailable\n          isPopular\n          sortOrder\n          createdAt\n          updatedAt\n          options {\n            id\n            name\n            type\n            isRequired\n            sortOrder\n            createdAt\n            values {\n              id\n              name\n              price\n              isDefault\n              sortOrder\n              createdAt\n            }\n          }\n        }\n      }\n    }\n  }\n": types.RestaurantDocument,
    "\n  query FavoriteRestaurants {\n    favoriteRestaurants {\n      id\n      name\n      slug\n      description\n      image\n      cuisine\n      rating\n      reviewCount\n      deliveryTime\n      deliveryFee\n      minimumOrder\n      isOpen\n      isActive\n      address {\n        street\n        city\n        state\n        zipCode\n        latitude\n        longitude\n      }\n      phone\n      createdAt\n      updatedAt\n    }\n  }\n": types.FavoriteRestaurantsDocument,
    "\n  mutation ToggleFavorite($restaurantId: String!) {\n    toggleFavorite(restaurantId: $restaurantId)\n  }\n": types.ToggleFavoriteDocument,
    "\n  query Cart {\n    cart {\n      id\n      restaurantId\n      createdAt\n      updatedAt\n      items {\n        id\n        menuItemId\n        quantity\n        selectedOptions\n        specialInstructions\n        createdAt\n        updatedAt\n        menuItem {\n          id\n          name\n          description\n          image\n          price\n          isAvailable\n          isPopular\n          options {\n            id\n            name\n            type\n            isRequired\n            values {\n              id\n              name\n              price\n              isDefault\n            }\n          }\n        }\n      }\n    }\n  }\n": types.CartDocument,
    "\n  mutation AddToCart($input: AddToCartInput!) {\n    addToCart(input: $input) {\n      id\n      menuItemId\n      quantity\n      selectedOptions\n      specialInstructions\n      createdAt\n      updatedAt\n    }\n  }\n": types.AddToCartDocument,
    "\n  mutation UpdateCartItem($input: UpdateCartItemInput!) {\n    updateCartItem(input: $input) {\n      id\n      quantity\n      selectedOptions\n      specialInstructions\n      updatedAt\n    }\n  }\n": types.UpdateCartItemDocument,
    "\n  mutation RemoveFromCart($input: RemoveFromCartInput!) {\n    removeFromCart(input: $input)\n  }\n": types.RemoveFromCartDocument,
    "\n  mutation ClearCart {\n    clearCart\n  }\n": types.ClearCartDocument,
    "\n  query Orders($status: OrderStatus, $limit: Int, $offset: Int) {\n    orders(status: $status, limit: $limit, offset: $offset) {\n      id\n      orderNumber\n      status\n      paymentStatus\n      subtotal\n      tax\n      deliveryFee\n      tip\n      total\n      deliveryAddress\n      specialInstructions\n      estimatedDeliveryTime\n      createdAt\n      updatedAt\n      restaurant {\n        id\n        name\n        slug\n        image\n        phone\n      }\n      courier {\n        id\n        firstName\n        lastName\n        phone\n        courierProfile {\n          vehicleType\n          rating\n        }\n      }\n      items {\n        id\n        menuItemId\n        quantity\n        unitPrice\n        totalPrice\n        selectedOptions\n        specialInstructions\n        menuItem {\n          id\n          name\n          description\n          image\n        }\n      }\n      events {\n        id\n        eventType\n        description\n        metadata\n        createdAt\n      }\n    }\n  }\n": types.OrdersDocument,
    "\n  query Order($id: String!) {\n    order(id: $id) {\n      id\n      orderNumber\n      status\n      paymentStatus\n      subtotal\n      tax\n      deliveryFee\n      tip\n      total\n      deliveryAddress\n      specialInstructions\n      estimatedDeliveryTime\n      createdAt\n      updatedAt\n      restaurant {\n        id\n        name\n        slug\n        image\n        phone\n        address {\n          street\n          city\n          state\n          zipCode\n        }\n      }\n      courier {\n        id\n        firstName\n        lastName\n        phone\n        courierProfile {\n          vehicleType\n          rating\n          currentLocation\n        }\n      }\n      items {\n        id\n        menuItemId\n        quantity\n        unitPrice\n        totalPrice\n        selectedOptions\n        specialInstructions\n        menuItem {\n          id\n          name\n          description\n          image\n        }\n      }\n      events {\n        id\n        eventType\n        description\n        metadata\n        createdAt\n      }\n    }\n  }\n": types.OrderDocument,
    "\n  mutation PlaceOrder($input: CreateOrderInput!) {\n    placeOrder(input: $input) {\n      id\n      orderNumber\n      status\n      paymentStatus\n      total\n      estimatedDeliveryTime\n      createdAt\n    }\n  }\n": types.PlaceOrderDocument,
    "\n  query CourierAssignments {\n    courierAssignments {\n      id\n      orderId\n      status\n      assignedAt\n      acceptedAt\n      pickedUpAt\n      deliveredAt\n      currentLocation\n      estimatedArrival\n      order {\n        id\n        orderNumber\n        status\n        total\n        deliveryAddress\n        specialInstructions\n        restaurant {\n          id\n          name\n          address {\n            street\n            city\n            state\n            zipCode\n            latitude\n            longitude\n          }\n        }\n        customer {\n          id\n          firstName\n          lastName\n          phone\n        }\n      }\n    }\n  }\n": types.CourierAssignmentsDocument,
    "\n  mutation AcceptDelivery($deliveryId: String!) {\n    acceptDelivery(deliveryId: $deliveryId) {\n      id\n      status\n      acceptedAt\n    }\n  }\n": types.AcceptDeliveryDocument,
    "\n  mutation PickupOrder($deliveryId: String!) {\n    pickupOrder(deliveryId: $deliveryId) {\n      id\n      status\n      pickedUpAt\n    }\n  }\n": types.PickupOrderDocument,
    "\n  mutation DeliverOrder($deliveryId: String!) {\n    deliverOrder(deliveryId: $deliveryId) {\n      id\n      status\n      deliveredAt\n    }\n  }\n": types.DeliverOrderDocument,
    "\n  mutation UpdateCourierLocation($input: UpdateCourierLocationInput!) {\n    updateCourierLocation(input: $input) {\n      id\n      userId\n      vehicleType\n      licensePlate\n      currentLocation\n      isAvailable\n      rating\n      reviewCount\n      totalDeliveries\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateCourierLocationDocument,
    "\n  query MerchantOrders($status: OrderStatus, $limit: Int, $offset: Int) {\n    merchantOrders(status: $status, limit: $limit, offset: $offset) {\n      id\n      orderNumber\n      status\n      paymentStatus\n      subtotal\n      tax\n      deliveryFee\n      tip\n      total\n      deliveryAddress\n      specialInstructions\n      estimatedDeliveryTime\n      createdAt\n      updatedAt\n      customer {\n        id\n        firstName\n        lastName\n        phone\n      }\n      courier {\n        id\n        firstName\n        lastName\n        phone\n      }\n      items {\n        id\n        menuItemId\n        quantity\n        unitPrice\n        totalPrice\n        selectedOptions\n        specialInstructions\n        menuItem {\n          id\n          name\n          description\n          image\n        }\n      }\n    }\n  }\n": types.MerchantOrdersDocument,
    "\n  mutation ConfirmOrder($orderId: String!) {\n    confirmOrder(orderId: $orderId) {\n      id\n      status\n      updatedAt\n    }\n  }\n": types.ConfirmOrderDocument,
    "\n  mutation SetRestaurantOpen($id: String!, $isOpen: Boolean!) {\n    setRestaurantOpen(id: $id, isOpen: $isOpen) {\n      id\n      isOpen\n      updatedAt\n    }\n  }\n": types.SetRestaurantOpenDocument,
    "\n  query Reviews($restaurantId: String, $courierId: String, $limit: Int, $offset: Int) {\n    reviews(restaurantId: $restaurantId, courierId: $courierId, limit: $limit, offset: $offset) {\n      id\n      rating\n      comment\n      type\n      createdAt\n      updatedAt\n      customer {\n        id\n        firstName\n        lastName\n      }\n      restaurant {\n        id\n        name\n        slug\n      }\n      courier {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n": types.ReviewsDocument,
    "\n  mutation CreateReview($input: CreateReviewInput!) {\n    createReview(input: $input) {\n      id\n      rating\n      comment\n      type\n      createdAt\n    }\n  }\n": types.CreateReviewDocument,
    "\n  subscription OrderStatusChanged($orderId: String!) {\n    orderStatusChanged(orderId: $orderId) {\n      id\n      eventType\n      description\n      metadata\n      createdAt\n    }\n  }\n": types.OrderStatusChangedDocument,
    "\n  subscription CourierLocation($deliveryId: String!) {\n    courierLocation(deliveryId: $deliveryId) {\n      courierId\n      deliveryId\n      location {\n        latitude\n        longitude\n        timestamp\n      }\n      estimatedArrival\n      updatedAt\n    }\n  }\n": types.CourierLocationDocument,
    "\n  subscription MerchantIncomingOrders($restaurantId: String!) {\n    merchantIncomingOrders(restaurantId: $restaurantId) {\n      id\n      orderNumber\n      status\n      total\n      deliveryAddress\n      specialInstructions\n      createdAt\n      customer {\n        id\n        firstName\n        lastName\n        phone\n      }\n      items {\n        id\n        quantity\n        menuItem {\n          id\n          name\n          price\n        }\n      }\n    }\n  }\n": types.MerchantIncomingOrdersDocument,
    "\n  mutation CreateCheckoutSession($input: CreateCheckoutSessionInput!) {\n    createCheckoutSession(input: $input) {\n      id\n      url\n      customerId\n      customerEmail\n      status\n      paymentIntentId\n      createdAt\n      expiresAt\n    }\n  }\n": types.CreateCheckoutSessionDocument,
    "\n  mutation CreateBillingPortalSession($input: CreateBillingPortalSessionInput!) {\n    createBillingPortalSession(input: $input) {\n      id\n      url\n      returnUrl\n      createdAt\n    }\n  }\n": types.CreateBillingPortalSessionDocument,
    "\n  mutation CreatePaymentIntent($input: CreatePaymentIntentInput!) {\n    createPaymentIntent(input: $input) {\n      id\n      status\n      amount\n      currency\n      clientSecret\n      description\n      createdAt\n      metadata\n    }\n  }\n": types.CreatePaymentIntentDocument,
    "\n  mutation ConfirmPaymentIntent($paymentIntentId: String!) {\n    confirmPaymentIntent(paymentIntentId: $paymentIntentId) {\n      id\n      status\n      amount\n      currency\n      clientSecret\n      description\n      createdAt\n      metadata\n    }\n  }\n": types.ConfirmPaymentIntentDocument,
    "\n  mutation CancelPaymentIntent($paymentIntentId: String!) {\n    cancelPaymentIntent(paymentIntentId: $paymentIntentId) {\n      id\n      status\n      amount\n      currency\n      clientSecret\n      description\n      createdAt\n      metadata\n    }\n  }\n": types.CancelPaymentIntentDocument,
    "\n  mutation CreateRefund($input: CreateRefundInput!) {\n    createRefund(input: $input) {\n      id\n      status\n      amount\n      currency\n      reason\n      createdAt\n    }\n  }\n": types.CreateRefundDocument,
    "\n  query PaymentIntent($paymentIntentId: String!) {\n    paymentIntent(paymentIntentId: $paymentIntentId) {\n      id\n      status\n      amount\n      currency\n      clientSecret\n      description\n      createdAt\n      metadata\n    }\n  }\n": types.PaymentIntentDocument,
    "\n  subscription DeliveryAssigned($courierId: String!) {\n    deliveryAssigned(courierId: $courierId) {\n      deliveryId\n      courierId\n      courierId\n      assignedAt\n    }\n  }\n": types.DeliveryAssignedDocument,
    "\n  subscription DeliveryStatusChanged($deliveryId: String!) {\n    deliveryStatusChanged(deliveryId: $deliveryId) {\n      deliveryId\n      status\n      message\n      updatedAt\n    }\n  }\n": types.DeliveryStatusChangedDocument,
    "\n  subscription CourierStatusChanged {\n    courierStatusChanged {\n      courierId\n      isAvailable\n      updatedAt\n    }\n  }\n": types.CourierStatusChangedDocument,
    "\n  subscription RealTimeOrderUpdates($orderId: String!) {\n    realTimeOrderUpdates(orderId: $orderId) {\n      orderId\n      status\n      message\n      metadata\n      updatedAt\n    }\n  }\n": types.RealTimeOrderUpdatesDocument,
    "\n  subscription LiveCourierTracking($courierId: String!) {\n    liveCourierTracking(courierId: $courierId) {\n      courierId\n      deliveryId\n      location {\n        latitude\n        longitude\n        timestamp\n      }\n      estimatedArrival\n      updatedAt\n      status\n    }\n  }\n": types.LiveCourierTrackingDocument,
    "\n  subscription RestaurantOrderQueue($restaurantId: String!) {\n    restaurantOrderQueue(restaurantId: $restaurantId) {\n      restaurantId\n      queueLength\n      pendingOrders {\n        id\n        orderNumber\n        status\n        total\n        createdAt\n        customer {\n          id\n          firstName\n          lastName\n        }\n      }\n      preparingOrders {\n        id\n        orderNumber\n        status\n        total\n        createdAt\n        customer {\n          id\n          firstName\n          lastName\n        }\n      }\n      readyOrders {\n        id\n        orderNumber\n        status\n        total\n        createdAt\n        customer {\n          id\n          firstName\n          lastName\n        }\n      }\n      updatedAt\n    }\n  }\n": types.RestaurantOrderQueueDocument,
    "\n  subscription CustomerOrderTracking($orderId: String!) {\n    customerOrderTracking(orderId: $orderId) {\n      orderId\n      status\n      courierId\n      message\n      currentLocation\n      estimatedDelivery\n      updatedAt\n    }\n  }\n": types.CustomerOrderTrackingDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Login($input: LoginInput!) {\n    login(input: $input) {\n      user {\n        id\n        email\n        firstName\n        lastName\n        role\n        avatar\n        isActive\n        emailVerified\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Login($input: LoginInput!) {\n    login(input: $input) {\n      user {\n        id\n        email\n        firstName\n        lastName\n        role\n        avatar\n        isActive\n        emailVerified\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Signup($input: SignupInput!) {\n    signup(input: $input) {\n      user {\n        id\n        email\n        firstName\n        lastName\n        role\n        avatar\n        isActive\n        emailVerified\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Signup($input: SignupInput!) {\n    signup(input: $input) {\n      user {\n        id\n        email\n        firstName\n        lastName\n        role\n        avatar\n        isActive\n        emailVerified\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LoginWithGoogle($idToken: String!) {\n    loginWithGoogle(idToken: $idToken) {\n      user {\n        id\n        email\n        firstName\n        lastName\n        role\n        avatar\n        isActive\n        emailVerified\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LoginWithGoogle($idToken: String!) {\n    loginWithGoogle(idToken: $idToken) {\n      user {\n        id\n        email\n        firstName\n        lastName\n        role\n        avatar\n        isActive\n        emailVerified\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RefreshToken($refreshToken: String!) {\n    refreshToken {\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation RefreshToken($refreshToken: String!) {\n    refreshToken {\n      message\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Logout {\n    logout {\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation Logout {\n    logout {\n      message\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUser($input: UpdateUserInput!) {\n    updateUser(input: $input) {\n      user{\n      id\n        email\n        firstName\n        lastName\n        phone\n        role\n        avatar\n        isActive\n        emailVerified\n        createdAt\n        updatedAt\n      }\n     \n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUser($input: UpdateUserInput!) {\n    updateUser(input: $input) {\n      user{\n      id\n        email\n        firstName\n        lastName\n        phone\n        role\n        avatar\n        isActive\n        emailVerified\n        createdAt\n        updatedAt\n      }\n     \n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Me {\n    me {\n      id\n      email\n      firstName\n      lastName\n      phone\n      role\n      avatar\n      isActive\n      emailVerified\n      createdAt\n      updatedAt\n      courierProfile {\n        id\n        vehicleType\n        licensePlate\n        isAvailable\n        currentLocation\n        rating\n        reviewCount\n        totalDeliveries\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query Me {\n    me {\n      id\n      email\n      firstName\n      lastName\n      phone\n      role\n      avatar\n      isActive\n      emailVerified\n      createdAt\n      updatedAt\n      courierProfile {\n        id\n        vehicleType\n        licensePlate\n        isAvailable\n        currentLocation\n        rating\n        reviewCount\n        totalDeliveries\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Restaurants(\n    $cuisine: String\n    $isOpen: Boolean\n    $limit: Int\n    $offset: Int\n    $search: String\n    $sortBy: String\n    $sortOrder: String\n  ) {\n    restaurants(\n      cuisine: $cuisine\n      isOpen: $isOpen\n      limit: $limit\n      offset: $offset\n      search: $search\n      sortBy: $sortBy\n      sortOrder: $sortOrder\n    ) {\n      id\n      name\n      slug\n      description\n      image\n      cuisine\n      rating\n      reviewCount\n      deliveryTime\n      deliveryFee\n      minimumOrder\n      isOpen\n      isActive\n      address {\n        street\n        city\n        state\n        zipCode\n        latitude\n        longitude\n      }\n      phone\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query Restaurants(\n    $cuisine: String\n    $isOpen: Boolean\n    $limit: Int\n    $offset: Int\n    $search: String\n    $sortBy: String\n    $sortOrder: String\n  ) {\n    restaurants(\n      cuisine: $cuisine\n      isOpen: $isOpen\n      limit: $limit\n      offset: $offset\n      search: $search\n      sortBy: $sortBy\n      sortOrder: $sortOrder\n    ) {\n      id\n      name\n      slug\n      description\n      image\n      cuisine\n      rating\n      reviewCount\n      deliveryTime\n      deliveryFee\n      minimumOrder\n      isOpen\n      isActive\n      address {\n        street\n        city\n        state\n        zipCode\n        latitude\n        longitude\n      }\n      phone\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Restaurant($slug: String!) {\n    restaurant(slug: $slug) {\n      id\n      name\n      slug\n      description\n      image\n      cuisine\n      rating\n      reviewCount\n      deliveryTime\n      deliveryFee\n      minimumOrder\n      isOpen\n      isActive\n      address {\n        street\n        city\n        state\n        zipCode\n        latitude\n        longitude\n      }\n      phone\n      createdAt\n      updatedAt\n      menuCategories {\n        id\n        name\n        description\n        sortOrder\n        isActive\n        createdAt\n        updatedAt\n        menuItems {\n          id\n          name\n          description\n          image\n          price\n          isAvailable\n          isPopular\n          sortOrder\n          createdAt\n          updatedAt\n          options {\n            id\n            name\n            type\n            isRequired\n            sortOrder\n            createdAt\n            values {\n              id\n              name\n              price\n              isDefault\n              sortOrder\n              createdAt\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Restaurant($slug: String!) {\n    restaurant(slug: $slug) {\n      id\n      name\n      slug\n      description\n      image\n      cuisine\n      rating\n      reviewCount\n      deliveryTime\n      deliveryFee\n      minimumOrder\n      isOpen\n      isActive\n      address {\n        street\n        city\n        state\n        zipCode\n        latitude\n        longitude\n      }\n      phone\n      createdAt\n      updatedAt\n      menuCategories {\n        id\n        name\n        description\n        sortOrder\n        isActive\n        createdAt\n        updatedAt\n        menuItems {\n          id\n          name\n          description\n          image\n          price\n          isAvailable\n          isPopular\n          sortOrder\n          createdAt\n          updatedAt\n          options {\n            id\n            name\n            type\n            isRequired\n            sortOrder\n            createdAt\n            values {\n              id\n              name\n              price\n              isDefault\n              sortOrder\n              createdAt\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FavoriteRestaurants {\n    favoriteRestaurants {\n      id\n      name\n      slug\n      description\n      image\n      cuisine\n      rating\n      reviewCount\n      deliveryTime\n      deliveryFee\n      minimumOrder\n      isOpen\n      isActive\n      address {\n        street\n        city\n        state\n        zipCode\n        latitude\n        longitude\n      }\n      phone\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FavoriteRestaurants {\n    favoriteRestaurants {\n      id\n      name\n      slug\n      description\n      image\n      cuisine\n      rating\n      reviewCount\n      deliveryTime\n      deliveryFee\n      minimumOrder\n      isOpen\n      isActive\n      address {\n        street\n        city\n        state\n        zipCode\n        latitude\n        longitude\n      }\n      phone\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ToggleFavorite($restaurantId: String!) {\n    toggleFavorite(restaurantId: $restaurantId)\n  }\n"): (typeof documents)["\n  mutation ToggleFavorite($restaurantId: String!) {\n    toggleFavorite(restaurantId: $restaurantId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Cart {\n    cart {\n      id\n      restaurantId\n      createdAt\n      updatedAt\n      items {\n        id\n        menuItemId\n        quantity\n        selectedOptions\n        specialInstructions\n        createdAt\n        updatedAt\n        menuItem {\n          id\n          name\n          description\n          image\n          price\n          isAvailable\n          isPopular\n          options {\n            id\n            name\n            type\n            isRequired\n            values {\n              id\n              name\n              price\n              isDefault\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Cart {\n    cart {\n      id\n      restaurantId\n      createdAt\n      updatedAt\n      items {\n        id\n        menuItemId\n        quantity\n        selectedOptions\n        specialInstructions\n        createdAt\n        updatedAt\n        menuItem {\n          id\n          name\n          description\n          image\n          price\n          isAvailable\n          isPopular\n          options {\n            id\n            name\n            type\n            isRequired\n            values {\n              id\n              name\n              price\n              isDefault\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddToCart($input: AddToCartInput!) {\n    addToCart(input: $input) {\n      id\n      menuItemId\n      quantity\n      selectedOptions\n      specialInstructions\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation AddToCart($input: AddToCartInput!) {\n    addToCart(input: $input) {\n      id\n      menuItemId\n      quantity\n      selectedOptions\n      specialInstructions\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCartItem($input: UpdateCartItemInput!) {\n    updateCartItem(input: $input) {\n      id\n      quantity\n      selectedOptions\n      specialInstructions\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCartItem($input: UpdateCartItemInput!) {\n    updateCartItem(input: $input) {\n      id\n      quantity\n      selectedOptions\n      specialInstructions\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveFromCart($input: RemoveFromCartInput!) {\n    removeFromCart(input: $input)\n  }\n"): (typeof documents)["\n  mutation RemoveFromCart($input: RemoveFromCartInput!) {\n    removeFromCart(input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ClearCart {\n    clearCart\n  }\n"): (typeof documents)["\n  mutation ClearCart {\n    clearCart\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Orders($status: OrderStatus, $limit: Int, $offset: Int) {\n    orders(status: $status, limit: $limit, offset: $offset) {\n      id\n      orderNumber\n      status\n      paymentStatus\n      subtotal\n      tax\n      deliveryFee\n      tip\n      total\n      deliveryAddress\n      specialInstructions\n      estimatedDeliveryTime\n      createdAt\n      updatedAt\n      restaurant {\n        id\n        name\n        slug\n        image\n        phone\n      }\n      courier {\n        id\n        firstName\n        lastName\n        phone\n        courierProfile {\n          vehicleType\n          rating\n        }\n      }\n      items {\n        id\n        menuItemId\n        quantity\n        unitPrice\n        totalPrice\n        selectedOptions\n        specialInstructions\n        menuItem {\n          id\n          name\n          description\n          image\n        }\n      }\n      events {\n        id\n        eventType\n        description\n        metadata\n        createdAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query Orders($status: OrderStatus, $limit: Int, $offset: Int) {\n    orders(status: $status, limit: $limit, offset: $offset) {\n      id\n      orderNumber\n      status\n      paymentStatus\n      subtotal\n      tax\n      deliveryFee\n      tip\n      total\n      deliveryAddress\n      specialInstructions\n      estimatedDeliveryTime\n      createdAt\n      updatedAt\n      restaurant {\n        id\n        name\n        slug\n        image\n        phone\n      }\n      courier {\n        id\n        firstName\n        lastName\n        phone\n        courierProfile {\n          vehicleType\n          rating\n        }\n      }\n      items {\n        id\n        menuItemId\n        quantity\n        unitPrice\n        totalPrice\n        selectedOptions\n        specialInstructions\n        menuItem {\n          id\n          name\n          description\n          image\n        }\n      }\n      events {\n        id\n        eventType\n        description\n        metadata\n        createdAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Order($id: String!) {\n    order(id: $id) {\n      id\n      orderNumber\n      status\n      paymentStatus\n      subtotal\n      tax\n      deliveryFee\n      tip\n      total\n      deliveryAddress\n      specialInstructions\n      estimatedDeliveryTime\n      createdAt\n      updatedAt\n      restaurant {\n        id\n        name\n        slug\n        image\n        phone\n        address {\n          street\n          city\n          state\n          zipCode\n        }\n      }\n      courier {\n        id\n        firstName\n        lastName\n        phone\n        courierProfile {\n          vehicleType\n          rating\n          currentLocation\n        }\n      }\n      items {\n        id\n        menuItemId\n        quantity\n        unitPrice\n        totalPrice\n        selectedOptions\n        specialInstructions\n        menuItem {\n          id\n          name\n          description\n          image\n        }\n      }\n      events {\n        id\n        eventType\n        description\n        metadata\n        createdAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query Order($id: String!) {\n    order(id: $id) {\n      id\n      orderNumber\n      status\n      paymentStatus\n      subtotal\n      tax\n      deliveryFee\n      tip\n      total\n      deliveryAddress\n      specialInstructions\n      estimatedDeliveryTime\n      createdAt\n      updatedAt\n      restaurant {\n        id\n        name\n        slug\n        image\n        phone\n        address {\n          street\n          city\n          state\n          zipCode\n        }\n      }\n      courier {\n        id\n        firstName\n        lastName\n        phone\n        courierProfile {\n          vehicleType\n          rating\n          currentLocation\n        }\n      }\n      items {\n        id\n        menuItemId\n        quantity\n        unitPrice\n        totalPrice\n        selectedOptions\n        specialInstructions\n        menuItem {\n          id\n          name\n          description\n          image\n        }\n      }\n      events {\n        id\n        eventType\n        description\n        metadata\n        createdAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PlaceOrder($input: CreateOrderInput!) {\n    placeOrder(input: $input) {\n      id\n      orderNumber\n      status\n      paymentStatus\n      total\n      estimatedDeliveryTime\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation PlaceOrder($input: CreateOrderInput!) {\n    placeOrder(input: $input) {\n      id\n      orderNumber\n      status\n      paymentStatus\n      total\n      estimatedDeliveryTime\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CourierAssignments {\n    courierAssignments {\n      id\n      orderId\n      status\n      assignedAt\n      acceptedAt\n      pickedUpAt\n      deliveredAt\n      currentLocation\n      estimatedArrival\n      order {\n        id\n        orderNumber\n        status\n        total\n        deliveryAddress\n        specialInstructions\n        restaurant {\n          id\n          name\n          address {\n            street\n            city\n            state\n            zipCode\n            latitude\n            longitude\n          }\n        }\n        customer {\n          id\n          firstName\n          lastName\n          phone\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CourierAssignments {\n    courierAssignments {\n      id\n      orderId\n      status\n      assignedAt\n      acceptedAt\n      pickedUpAt\n      deliveredAt\n      currentLocation\n      estimatedArrival\n      order {\n        id\n        orderNumber\n        status\n        total\n        deliveryAddress\n        specialInstructions\n        restaurant {\n          id\n          name\n          address {\n            street\n            city\n            state\n            zipCode\n            latitude\n            longitude\n          }\n        }\n        customer {\n          id\n          firstName\n          lastName\n          phone\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AcceptDelivery($deliveryId: String!) {\n    acceptDelivery(deliveryId: $deliveryId) {\n      id\n      status\n      acceptedAt\n    }\n  }\n"): (typeof documents)["\n  mutation AcceptDelivery($deliveryId: String!) {\n    acceptDelivery(deliveryId: $deliveryId) {\n      id\n      status\n      acceptedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PickupOrder($deliveryId: String!) {\n    pickupOrder(deliveryId: $deliveryId) {\n      id\n      status\n      pickedUpAt\n    }\n  }\n"): (typeof documents)["\n  mutation PickupOrder($deliveryId: String!) {\n    pickupOrder(deliveryId: $deliveryId) {\n      id\n      status\n      pickedUpAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeliverOrder($deliveryId: String!) {\n    deliverOrder(deliveryId: $deliveryId) {\n      id\n      status\n      deliveredAt\n    }\n  }\n"): (typeof documents)["\n  mutation DeliverOrder($deliveryId: String!) {\n    deliverOrder(deliveryId: $deliveryId) {\n      id\n      status\n      deliveredAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCourierLocation($input: UpdateCourierLocationInput!) {\n    updateCourierLocation(input: $input) {\n      id\n      userId\n      vehicleType\n      licensePlate\n      currentLocation\n      isAvailable\n      rating\n      reviewCount\n      totalDeliveries\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCourierLocation($input: UpdateCourierLocationInput!) {\n    updateCourierLocation(input: $input) {\n      id\n      userId\n      vehicleType\n      licensePlate\n      currentLocation\n      isAvailable\n      rating\n      reviewCount\n      totalDeliveries\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MerchantOrders($status: OrderStatus, $limit: Int, $offset: Int) {\n    merchantOrders(status: $status, limit: $limit, offset: $offset) {\n      id\n      orderNumber\n      status\n      paymentStatus\n      subtotal\n      tax\n      deliveryFee\n      tip\n      total\n      deliveryAddress\n      specialInstructions\n      estimatedDeliveryTime\n      createdAt\n      updatedAt\n      customer {\n        id\n        firstName\n        lastName\n        phone\n      }\n      courier {\n        id\n        firstName\n        lastName\n        phone\n      }\n      items {\n        id\n        menuItemId\n        quantity\n        unitPrice\n        totalPrice\n        selectedOptions\n        specialInstructions\n        menuItem {\n          id\n          name\n          description\n          image\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query MerchantOrders($status: OrderStatus, $limit: Int, $offset: Int) {\n    merchantOrders(status: $status, limit: $limit, offset: $offset) {\n      id\n      orderNumber\n      status\n      paymentStatus\n      subtotal\n      tax\n      deliveryFee\n      tip\n      total\n      deliveryAddress\n      specialInstructions\n      estimatedDeliveryTime\n      createdAt\n      updatedAt\n      customer {\n        id\n        firstName\n        lastName\n        phone\n      }\n      courier {\n        id\n        firstName\n        lastName\n        phone\n      }\n      items {\n        id\n        menuItemId\n        quantity\n        unitPrice\n        totalPrice\n        selectedOptions\n        specialInstructions\n        menuItem {\n          id\n          name\n          description\n          image\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ConfirmOrder($orderId: String!) {\n    confirmOrder(orderId: $orderId) {\n      id\n      status\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation ConfirmOrder($orderId: String!) {\n    confirmOrder(orderId: $orderId) {\n      id\n      status\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetRestaurantOpen($id: String!, $isOpen: Boolean!) {\n    setRestaurantOpen(id: $id, isOpen: $isOpen) {\n      id\n      isOpen\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation SetRestaurantOpen($id: String!, $isOpen: Boolean!) {\n    setRestaurantOpen(id: $id, isOpen: $isOpen) {\n      id\n      isOpen\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Reviews($restaurantId: String, $courierId: String, $limit: Int, $offset: Int) {\n    reviews(restaurantId: $restaurantId, courierId: $courierId, limit: $limit, offset: $offset) {\n      id\n      rating\n      comment\n      type\n      createdAt\n      updatedAt\n      customer {\n        id\n        firstName\n        lastName\n      }\n      restaurant {\n        id\n        name\n        slug\n      }\n      courier {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n"): (typeof documents)["\n  query Reviews($restaurantId: String, $courierId: String, $limit: Int, $offset: Int) {\n    reviews(restaurantId: $restaurantId, courierId: $courierId, limit: $limit, offset: $offset) {\n      id\n      rating\n      comment\n      type\n      createdAt\n      updatedAt\n      customer {\n        id\n        firstName\n        lastName\n      }\n      restaurant {\n        id\n        name\n        slug\n      }\n      courier {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateReview($input: CreateReviewInput!) {\n    createReview(input: $input) {\n      id\n      rating\n      comment\n      type\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateReview($input: CreateReviewInput!) {\n    createReview(input: $input) {\n      id\n      rating\n      comment\n      type\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription OrderStatusChanged($orderId: String!) {\n    orderStatusChanged(orderId: $orderId) {\n      id\n      eventType\n      description\n      metadata\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  subscription OrderStatusChanged($orderId: String!) {\n    orderStatusChanged(orderId: $orderId) {\n      id\n      eventType\n      description\n      metadata\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription CourierLocation($deliveryId: String!) {\n    courierLocation(deliveryId: $deliveryId) {\n      courierId\n      deliveryId\n      location {\n        latitude\n        longitude\n        timestamp\n      }\n      estimatedArrival\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  subscription CourierLocation($deliveryId: String!) {\n    courierLocation(deliveryId: $deliveryId) {\n      courierId\n      deliveryId\n      location {\n        latitude\n        longitude\n        timestamp\n      }\n      estimatedArrival\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription MerchantIncomingOrders($restaurantId: String!) {\n    merchantIncomingOrders(restaurantId: $restaurantId) {\n      id\n      orderNumber\n      status\n      total\n      deliveryAddress\n      specialInstructions\n      createdAt\n      customer {\n        id\n        firstName\n        lastName\n        phone\n      }\n      items {\n        id\n        quantity\n        menuItem {\n          id\n          name\n          price\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription MerchantIncomingOrders($restaurantId: String!) {\n    merchantIncomingOrders(restaurantId: $restaurantId) {\n      id\n      orderNumber\n      status\n      total\n      deliveryAddress\n      specialInstructions\n      createdAt\n      customer {\n        id\n        firstName\n        lastName\n        phone\n      }\n      items {\n        id\n        quantity\n        menuItem {\n          id\n          name\n          price\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCheckoutSession($input: CreateCheckoutSessionInput!) {\n    createCheckoutSession(input: $input) {\n      id\n      url\n      customerId\n      customerEmail\n      status\n      paymentIntentId\n      createdAt\n      expiresAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCheckoutSession($input: CreateCheckoutSessionInput!) {\n    createCheckoutSession(input: $input) {\n      id\n      url\n      customerId\n      customerEmail\n      status\n      paymentIntentId\n      createdAt\n      expiresAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateBillingPortalSession($input: CreateBillingPortalSessionInput!) {\n    createBillingPortalSession(input: $input) {\n      id\n      url\n      returnUrl\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateBillingPortalSession($input: CreateBillingPortalSessionInput!) {\n    createBillingPortalSession(input: $input) {\n      id\n      url\n      returnUrl\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreatePaymentIntent($input: CreatePaymentIntentInput!) {\n    createPaymentIntent(input: $input) {\n      id\n      status\n      amount\n      currency\n      clientSecret\n      description\n      createdAt\n      metadata\n    }\n  }\n"): (typeof documents)["\n  mutation CreatePaymentIntent($input: CreatePaymentIntentInput!) {\n    createPaymentIntent(input: $input) {\n      id\n      status\n      amount\n      currency\n      clientSecret\n      description\n      createdAt\n      metadata\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ConfirmPaymentIntent($paymentIntentId: String!) {\n    confirmPaymentIntent(paymentIntentId: $paymentIntentId) {\n      id\n      status\n      amount\n      currency\n      clientSecret\n      description\n      createdAt\n      metadata\n    }\n  }\n"): (typeof documents)["\n  mutation ConfirmPaymentIntent($paymentIntentId: String!) {\n    confirmPaymentIntent(paymentIntentId: $paymentIntentId) {\n      id\n      status\n      amount\n      currency\n      clientSecret\n      description\n      createdAt\n      metadata\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CancelPaymentIntent($paymentIntentId: String!) {\n    cancelPaymentIntent(paymentIntentId: $paymentIntentId) {\n      id\n      status\n      amount\n      currency\n      clientSecret\n      description\n      createdAt\n      metadata\n    }\n  }\n"): (typeof documents)["\n  mutation CancelPaymentIntent($paymentIntentId: String!) {\n    cancelPaymentIntent(paymentIntentId: $paymentIntentId) {\n      id\n      status\n      amount\n      currency\n      clientSecret\n      description\n      createdAt\n      metadata\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateRefund($input: CreateRefundInput!) {\n    createRefund(input: $input) {\n      id\n      status\n      amount\n      currency\n      reason\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateRefund($input: CreateRefundInput!) {\n    createRefund(input: $input) {\n      id\n      status\n      amount\n      currency\n      reason\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PaymentIntent($paymentIntentId: String!) {\n    paymentIntent(paymentIntentId: $paymentIntentId) {\n      id\n      status\n      amount\n      currency\n      clientSecret\n      description\n      createdAt\n      metadata\n    }\n  }\n"): (typeof documents)["\n  query PaymentIntent($paymentIntentId: String!) {\n    paymentIntent(paymentIntentId: $paymentIntentId) {\n      id\n      status\n      amount\n      currency\n      clientSecret\n      description\n      createdAt\n      metadata\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription DeliveryAssigned($courierId: String!) {\n    deliveryAssigned(courierId: $courierId) {\n      deliveryId\n      courierId\n      courierId\n      assignedAt\n    }\n  }\n"): (typeof documents)["\n  subscription DeliveryAssigned($courierId: String!) {\n    deliveryAssigned(courierId: $courierId) {\n      deliveryId\n      courierId\n      courierId\n      assignedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription DeliveryStatusChanged($deliveryId: String!) {\n    deliveryStatusChanged(deliveryId: $deliveryId) {\n      deliveryId\n      status\n      message\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  subscription DeliveryStatusChanged($deliveryId: String!) {\n    deliveryStatusChanged(deliveryId: $deliveryId) {\n      deliveryId\n      status\n      message\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription CourierStatusChanged {\n    courierStatusChanged {\n      courierId\n      isAvailable\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  subscription CourierStatusChanged {\n    courierStatusChanged {\n      courierId\n      isAvailable\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription RealTimeOrderUpdates($orderId: String!) {\n    realTimeOrderUpdates(orderId: $orderId) {\n      orderId\n      status\n      message\n      metadata\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  subscription RealTimeOrderUpdates($orderId: String!) {\n    realTimeOrderUpdates(orderId: $orderId) {\n      orderId\n      status\n      message\n      metadata\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription LiveCourierTracking($courierId: String!) {\n    liveCourierTracking(courierId: $courierId) {\n      courierId\n      deliveryId\n      location {\n        latitude\n        longitude\n        timestamp\n      }\n      estimatedArrival\n      updatedAt\n      status\n    }\n  }\n"): (typeof documents)["\n  subscription LiveCourierTracking($courierId: String!) {\n    liveCourierTracking(courierId: $courierId) {\n      courierId\n      deliveryId\n      location {\n        latitude\n        longitude\n        timestamp\n      }\n      estimatedArrival\n      updatedAt\n      status\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription RestaurantOrderQueue($restaurantId: String!) {\n    restaurantOrderQueue(restaurantId: $restaurantId) {\n      restaurantId\n      queueLength\n      pendingOrders {\n        id\n        orderNumber\n        status\n        total\n        createdAt\n        customer {\n          id\n          firstName\n          lastName\n        }\n      }\n      preparingOrders {\n        id\n        orderNumber\n        status\n        total\n        createdAt\n        customer {\n          id\n          firstName\n          lastName\n        }\n      }\n      readyOrders {\n        id\n        orderNumber\n        status\n        total\n        createdAt\n        customer {\n          id\n          firstName\n          lastName\n        }\n      }\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  subscription RestaurantOrderQueue($restaurantId: String!) {\n    restaurantOrderQueue(restaurantId: $restaurantId) {\n      restaurantId\n      queueLength\n      pendingOrders {\n        id\n        orderNumber\n        status\n        total\n        createdAt\n        customer {\n          id\n          firstName\n          lastName\n        }\n      }\n      preparingOrders {\n        id\n        orderNumber\n        status\n        total\n        createdAt\n        customer {\n          id\n          firstName\n          lastName\n        }\n      }\n      readyOrders {\n        id\n        orderNumber\n        status\n        total\n        createdAt\n        customer {\n          id\n          firstName\n          lastName\n        }\n      }\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription CustomerOrderTracking($orderId: String!) {\n    customerOrderTracking(orderId: $orderId) {\n      orderId\n      status\n      courierId\n      message\n      currentLocation\n      estimatedDelivery\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  subscription CustomerOrderTracking($orderId: String!) {\n    customerOrderTracking(orderId: $orderId) {\n      orderId\n      status\n      courierId\n      message\n      currentLocation\n      estimatedDelivery\n      updatedAt\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;