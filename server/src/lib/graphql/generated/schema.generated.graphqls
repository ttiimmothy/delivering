input AddToCartInput {
  menuItemId: String!
  quantity: Int!
  selectedOptions: String
  specialInstructions: String
}

type Address {
  city: String!
  country: String!
  createdAt: String!
  id: String!
  isDefault: Boolean!
  label: String!
  latitude: Float!
  longitude: Float!
  state: String!
  street: String!
  updatedAt: String!
  userId: String!
  zipCode: String!
}

input AddressInput {
  city: String!
  country: String!
  isDefault: Boolean
  label: String!
  latitude: Float!
  longitude: Float!
  state: String!
  street: String!
  zipCode: String!
}

type AuthResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type BillingPortalSession {
  createdAt: String!
  id: String!
  returnUrl: String!
  url: String!
}

type Cart {
  createdAt: String!
  id: String!
  items: [CartItem]
  restaurant: Restaurant
  restaurantId: String!
  updatedAt: String!
  userId: String!
}

type CartItem {
  cartId: String!
  createdAt: String!
  id: String!
  menuItem: MenuItem
  menuItemId: String!
  quantity: Int!
  selectedOptions: String!
  specialInstructions: String
  updatedAt: String!
}

type CheckoutSession {
  createdAt: String!
  customerEmail: String
  customerId: String
  expiresAt: String!
  id: String!
  paymentIntentId: String
  status: String!
  url: String!
}

type CourierLocationUpdate {
  courierId: String!
  deliveryId: String!
  estimatedArrival: String
  location: Location
  timestamp: String!
}

type CourierProfile {
  createdAt: String!
  currentLocation: Location
  id: String!
  isAvailable: Boolean!
  licensePlate: String
  rating: Float!
  reviewCount: Int!
  totalDeliveries: Int!
  updatedAt: String!
  user: User
  userId: String!
  vehicleType: VehicleType!
}

input CourierProfileInput {
  currentLocation: LocationInput
  isAvailable: Boolean
  licensePlate: String
  vehicleType: VehicleType!
}

type CourierStatusUpdate {
  courierId: String!
  isAvailable: Boolean!
  timestamp: String!
}

type CourierTrackingUpdate {
  courierId: String!
  currentLocation: Location
  estimatedArrival: String
  timestamp: String!
}

input CreateBillingPortalSessionInput {
  customerId: String!
  returnUrl: String!
}

input CreateCheckoutSessionInput {
  cancelUrl: String!
  customerEmail: String
  orderId: String!
  successUrl: String!
}

input CreateCourierProfileInput {
  currentLocation: LocationInput
  isAvailable: Boolean
  licensePlate: String
  vehicleType: VehicleType!
}

input CreateOrderInput {
  deliveryAddress: String!
  specialInstructions: String
  tip: Float
}

input CreatePaymentIntentInput {
  amount: Float!
  currency: String
  description: String
  metadata: String
}

input CreateRefundInput {
  amount: Float
  paymentIntentId: String!
  reason: String
}

input CreateRestaurantInput {
  address: RestaurantAddressInput!
  cuisine: String!
  deliveryFee: Float
  deliveryTime: Int
  description: String
  email: String
  minimumOrder: Float
  name: String!
  phone: String!
}

input CreateReviewInput {
  comment: String
  courierId: String
  orderId: String
  rating: Int!
  restaurantId: String
  type: ReviewType!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the date-time format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Delivery {
  acceptedAt: String
  assignedAt: String!
  courier: User
  courierId: String!
  createdAt: String!
  currentLocation: Location
  deliveredAt: String
  estimatedArrival: String
  id: String!
  order: Order
  orderId: String!
  pickedUpAt: String
  status: DeliveryStatus!
  updatedAt: String!
}

type DeliveryAssignment {
  assignedBy: String!
  courierId: String!
  deliveryId: String!
  timestamp: String!
}

enum DeliveryStatus {
  accepted
  assigned
  delivered
  picked_up
}

type DeliveryStatusUpdate {
  deliveryId: String!
  message: String
  status: String!
  timestamp: String!
}

"""A location object with latitude and longitude"""
scalar Location

"""A location input object with latitude and longitude"""
scalar LocationInput

input LoginInput {
  email: String!
  password: String!
}

type MenuCategory {
  createdAt: String!
  description: String
  id: String!
  isActive: Boolean!
  menuItems: [MenuItem]
  name: String!
  restaurantId: String!
  sortOrder: Int!
  updatedAt: String!
}

type MenuItem {
  categoryId: String!
  createdAt: String!
  description: String
  id: String!
  image: String
  isAvailable: Boolean!
  isPopular: Boolean!
  name: String!
  options: [MenuItemOption]
  price: Float!
  restaurantId: String!
  sortOrder: Int!
  updatedAt: String!
}

type MenuItemOption {
  createdAt: String!
  id: String!
  isRequired: Boolean!
  menuItemId: String!
  name: String!
  sortOrder: Int!
  type: OptionType!
  values: [OptionValue]
}

type Mutation {
  acceptDelivery(deliveryId: String!): Delivery
  addToCart(input: AddToCartInput!): CartItem
  cancelPaymentIntent(paymentIntentId: String!): PaymentIntent
  clearCart: Boolean
  confirmOrder(orderId: String!): Order
  confirmPaymentIntent(paymentIntentId: String!): PaymentIntent
  createBillingPortalSession(input: CreateBillingPortalSessionInput!): BillingPortalSession
  createCheckoutSession(input: CreateCheckoutSessionInput!): CheckoutSession
  createPaymentIntent(input: CreatePaymentIntentInput!): PaymentIntent
  createRefund(input: CreateRefundInput!): Refund
  createReview(input: CreateReviewInput!): Review
  deliverOrder(deliveryId: String!): Delivery
  login(input: LoginInput!): AuthResponse
  loginWithGoogle(idToken: String!): AuthResponse
  logout: Boolean
  pickupOrder(deliveryId: String!): Delivery
  placeOrder(input: CreateOrderInput!): Order
  refreshToken(refreshToken: String!): RefreshTokenResponse
  removeFromCart(input: RemoveFromCartInput!): Boolean
  setRestaurantOpen(id: String!, isOpen: Boolean!): Restaurant
  signup(input: SignupInput!): AuthResponse
  toggleFavorite(restaurantId: String!): Boolean
  updateCartItem(input: UpdateCartItemInput!): CartItem
  updateCourierLocation(input: UpdateCourierLocationInput!): CourierProfile
}

enum OptionType {
  multiple
  single
}

type OptionValue {
  createdAt: String!
  id: String!
  isDefault: Boolean!
  name: String!
  optionId: String!
  price: Float!
  sortOrder: Int!
}

type Order {
  courier: User
  courierId: String
  createdAt: String!
  customer: User
  customerId: String!
  deliveryAddress: String!
  deliveryFee: Float!
  estimatedDeliveryTime: String
  events: [OrderEvent]
  id: String!
  items: [OrderItem]
  orderNumber: String!
  paymentStatus: PaymentStatus!
  restaurant: Restaurant
  restaurantId: String!
  specialInstructions: String
  status: OrderStatus!
  subtotal: Float!
  tax: Float!
  tip: Float!
  total: Float!
  updatedAt: String!
}

type OrderEvent {
  createdAt: String!
  id: String!
  message: String
  metadata: String
  orderId: String!
  status: OrderStatus!
}

type OrderItem {
  createdAt: String!
  id: String!
  menuItem: MenuItem
  menuItemId: String!
  orderId: String!
  quantity: Int!
  selectedOptions: String!
  specialInstructions: String
  totalPrice: Float!
  unitPrice: Float!
}

type OrderQueueUpdate {
  pendingOrders: [Order]!
  preparingOrders: [Order]!
  readyOrders: [Order]!
  restaurantId: String!
  timestamp: String!
}

enum OrderStatus {
  cancelled
  confirmed
  delivered
  pending
  picked_up
  preparing
  ready
}

type OrderTrackingUpdate {
  courier: User
  currentLocation: Location
  estimatedDelivery: String
  orderId: String!
  status: String!
  timestamp: String!
}

type OrderUpdate {
  message: String
  metadata: String
  orderId: String!
  status: String!
  timestamp: String!
}

type PaymentIntent {
  amount: Int!
  clientSecret: String!
  createdAt: String!
  currency: String!
  description: String
  id: String!
  metadata: String
  status: String!
}

enum PaymentStatus {
  failed
  paid
  pending
  refunded
}

type Query {
  cart: Cart
  courierAssignments: [Delivery]!
  favoriteRestaurants: [Restaurant]!
  me: User
  merchantOrders(limit: Int, offset: Int, status: OrderStatus): [Order]!
  order(id: String!): Order
  orders(limit: Int, offset: Int, status: OrderStatus): [Order]!
  paymentIntent(paymentIntentId: String!): PaymentIntent
  restaurant(slug: String!): Restaurant
  restaurants(cuisine: String, isOpen: Boolean, limit: Int, offset: Int, search: String, sortBy: String, sortOrder: String): [Restaurant]!
  reviews(courierId: String, limit: Int, offset: Int, restaurantId: String): [Review]!
}

type RefreshTokenResponse {
  accessToken: String!
  refreshToken: String!
}

type Refund {
  amount: Int!
  createdAt: String!
  currency: String!
  id: String!
  reason: String
  status: String!
}

input RemoveFromCartInput {
  cartItemId: String!
}

type Restaurant {
  address: Address
  createdAt: String!
  cuisine: String!
  deliveryFee: Float!
  deliveryTime: Int!
  description: String
  id: String!
  image: String
  isActive: Boolean!
  isFavorite: Boolean
  isOpen: Boolean!
  menuCategories: [MenuCategory]
  minimumOrder: Float!
  name: String!
  phone: String
  rating: Float
  reviewCount: Int!
  slug: String!
  updatedAt: String!
}

input RestaurantAddressInput {
  city: String!
  country: String
  state: String!
  street: String!
  zipCode: String!
}

type Review {
  comment: String
  courier: User
  courierId: String
  createdAt: String!
  customer: User
  customerId: String!
  id: String!
  order: Order
  orderId: String!
  rating: Int!
  restaurant: Restaurant
  restaurantId: String
  type: ReviewType!
  updatedAt: String!
}

enum ReviewType {
  courier
  restaurant
}

input SignupInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phone: String
}

type Subscription {
  courierLocation(deliveryId: String!): CourierLocationUpdate
  courierStatusChanged: CourierStatusUpdate
  customerOrderTracking(orderId: String!): OrderTrackingUpdate
  deliveryAssigned(courierId: String!): DeliveryAssignment
  deliveryStatusChanged(deliveryId: String!): DeliveryStatusUpdate
  liveCourierTracking(courierId: String!): CourierTrackingUpdate
  merchantIncomingOrders(restaurantId: String!): Order
  orderStatusChanged(orderId: String!): OrderEvent
  realTimeOrderUpdates(orderId: String!): OrderUpdate
  restaurantOrderQueue(restaurantId: String!): OrderQueueUpdate
}

input UpdateCartItemInput {
  cartItemId: String!
  quantity: Int
  selectedOptions: String
  specialInstructions: String
}

input UpdateCourierLocationInput {
  latitude: Float!
  longitude: Float!
}

input UpdateCourierProfileInput {
  currentLocation: LocationInput
  isAvailable: Boolean
  licensePlate: String
  vehicleType: VehicleType
}

input UpdateProfileInput {
  avatar: String
  firstName: String
  lastName: String
  phone: String
}

input UpdateRestaurantInput {
  address: RestaurantAddressInput
  cuisine: String
  deliveryFee: Float
  deliveryTime: Int
  description: String
  email: String
  minimumOrder: Float
  name: String
  phone: String
}

type User {
  addresses: [Address]
  avatar: String
  courierProfile: CourierProfile
  createdAt: String!
  email: String!
  emailVerified: Boolean!
  firstName: String!
  id: String!
  isActive: Boolean!
  lastName: String!
  phone: String
  role: UserRole!
  updatedAt: String!
}

enum UserRole {
  admin
  courier
  customer
  merchant
}

enum VehicleType {
  bike
  car
  motorcycle
}