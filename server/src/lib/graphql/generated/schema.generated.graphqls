input AddToCartInput {
  menuItemId: String!
  quantity: Int!
  selectedOptions: String
  specialInstructions: String
}

type Address {
  city: String!
  country: String!
  createdAt: String!
  id: String!
  isDefault: Boolean!
  state: String!
  street: String!
  updatedAt: String!
  user: User
  userId: String!
  zipCode: String!
}

input AddressInput {
  city: String!
  country: String!
  isDefault: Boolean
  state: String!
  street: String!
  zipCode: String!
}

input AssignCourierInput {
  courierId: String!
  orderId: String!
}

type AuthResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type BillingPortalSession {
  createdAt: String!
  id: String!
  returnUrl: String!
  url: String!
}

type Cart {
  createdAt: String!
  id: String!
  items: [CartItem]
  restaurantId: String!
  updatedAt: String!
  userId: String!
}

type CartItem {
  cartId: String!
  createdAt: String!
  id: String!
  menuItem: MenuItem
  menuItemId: String!
  quantity: Int!
  selectedOptions: String!
  specialInstructions: String
  updatedAt: String!
}

type CheckoutSession {
  createdAt: String!
  customerEmail: String!
  customerId: String!
  expiresAt: String!
  id: String!
  status: String!
  url: String!
}

type CourierLocationUpdate {
  deliveryId: String!
  latitude: Float!
  longitude: Float!
  timestamp: String!
}

type CourierProfile {
  createdAt: String!
  currentLocation: Location
  id: String!
  isAvailable: Boolean!
  licensePlate: String
  rating: Float!
  reviewCount: Int!
  totalDeliveries: Int!
  updatedAt: String!
  user: User
  userId: String!
  vehicleType: VehicleType!
}

input CourierProfileInput {
  currentLocation: LocationInput
  isAvailable: Boolean = true
  licensePlate: String
  vehicleType: VehicleType!
}

type CourierStatusUpdate {
  courierId: String!
  isAvailable: Boolean!
  updatedAt: String!
}

type CourierTrackingUpdate {
  courierId: String!
  deliveryId: String!
  latitude: Float!
  longitude: Float!
  status: String!
  timestamp: String!
}

input CreateBillingPortalSessionInput {
  customerId: String!
  returnUrl: String!
}

input CreateCheckoutSessionInput {
  cancelUrl: String!
  priceId: String!
  successUrl: String!
}

input CreateCourierProfileInput {
  currentLocation: LocationInput
  isAvailable: Boolean
  licensePlate: String
  vehicleType: VehicleType!
}

input CreateInvoiceInput {
  courierAmount: String!
  courierId: String
  orderId: String!
  platformFee: String!
  restaurantAmount: String!
  restaurantId: String!
}

input CreateMenuCategoryInput {
  description: String
  isActive: Boolean
  name: String!
  restaurantId: String!
  sortOrder: Int
}

input CreateMenuItemInput {
  categoryId: String!
  description: String
  image: String
  isAvailable: Boolean
  name: String!
  price: String!
  restaurantId: String!
  sortOrder: Int
}

input CreateMenuItemOptionInput {
  isRequired: Boolean
  menuItemId: String!
  name: String!
  sortOrder: Int
  type: MenuItemOptionType!
}

input CreateMenuItemOptionValueInput {
  name: String!
  optionId: String!
  price: String!
  sortOrder: Int
}

input CreateOrderInput {
  deliveryAddress: String!
  restaurantId: String!
  specialInstructions: String
  stripePaymentIntentId: String
}

input CreatePaymentIntentInput {
  amount: String!
  currency: String!
}

input CreateRefundInput {
  amount: String
  paymentIntentId: String!
  reason: String
}

input CreateRestaurantInput {
  address: AddressInput!
  cuisine: String!
  deliveryFee: String!
  deliveryTime: Int!
  description: String
  image: String
  minimumOrder: String!
  name: String!
  phone: String
  slug: String!
}

input CreateReviewInput {
  comment: String
  orderId: String!
  rating: Int!
  type: ReviewType!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Delivery {
  assignedAt: DateTime!
  courier: User
  courierId: String!
  createdAt: String!
  currentLocation: Location
  estimatedArrival: String
  id: String!
  order: Order
  orderId: String!
  status: DeliveryStatus!
  updatedAt: String!
}

type DeliveryAssignment {
  assignedAt: String!
  courierId: String!
  deliveryId: String!
  orderId: String!
}

enum DeliveryStatus {
  accepted
  assigned
  delivered
  picked_up
}

type DeliveryStatusUpdate {
  deliveryId: String!
  message: String
  status: String!
  updatedAt: String!
}

type Invoice {
  courier: User
  courierAmount: String!
  courierId: String
  createdAt: String!
  id: String!
  order: Order
  orderId: String!
  platformFee: String!
  restaurant: Restaurant
  restaurantAmount: String!
  restaurantId: String!
  status: InvoiceStatus!
  stripeTransferId: String
  updatedAt: String!
}

enum InvoiceStatus {
  failed
  paid
  pending
}

"""A location object with latitude and longitude"""
scalar Location

"""A location input object with latitude and longitude"""
scalar LocationInput

input LoginInput {
  email: String!
  password: String!
}

type MenuCategory {
  createdAt: String!
  description: String
  id: String!
  isActive: Boolean!
  menuItems: [MenuItem]
  name: String!
  restaurantId: String!
  sortOrder: Int!
  updatedAt: String!
}

type MenuItem {
  categoryId: String!
  createdAt: String!
  description: String
  id: String!
  image: String
  isAvailable: Boolean!
  name: String!
  options: [MenuItemOption]
  price: String!
  restaurantId: String!
  sortOrder: Int!
  updatedAt: String!
}

type MenuItemOption {
  createdAt: String!
  id: String!
  isRequired: Boolean!
  menuItemId: String!
  name: String!
  sortOrder: Int!
  type: MenuItemOptionType!
  updatedAt: String!
  values: [MenuItemOptionValue]
}

enum MenuItemOptionType {
  multiple
  single
}

type MenuItemOptionValue {
  createdAt: String!
  id: String!
  name: String!
  optionId: String!
  price: String!
  sortOrder: Int!
  updatedAt: String!
}

type Mutation {
  acceptDelivery(deliveryId: String!): Delivery
  addToCart(input: AddToCartInput!): CartItem
  cancelPaymentIntent(paymentIntentId: String!): PaymentIntent
  clearCart: Boolean
  confirmOrder(orderId: String!): Order
  confirmPaymentIntent(paymentIntentId: String!): PaymentIntent
  createBillingPortalSession(input: CreateBillingPortalSessionInput!): BillingPortalSession
  createCheckoutSession(input: CreateCheckoutSessionInput!): CheckoutSession
  createInvoice(input: CreateInvoiceInput!): Invoice
  createPaymentIntent(input: CreatePaymentIntentInput!): PaymentIntent
  createRefund(input: CreateRefundInput!): Refund
  createReview(input: CreateReviewInput!): Review
  deliverOrder(deliveryId: String!): Delivery
  login(input: LoginInput!): AuthResponse
  loginWithGoogle(idToken: String!): AuthResponse
  logout: Boolean
  markPayoutFailed(invoiceId: String!): Invoice
  pickupOrder(deliveryId: String!): Delivery
  placeOrder(input: CreateOrderInput!): Order
  processPayout(input: ProcessPayoutInput!): Invoice
  refreshToken(refreshToken: String!): RefreshTokenResponse
  removeFromCart(input: RemoveFromCartInput!): Boolean
  setRestaurantOpen(id: String!, isOpen: Boolean!): Restaurant
  signup(input: SignupInput!): AuthResponse
  toggleFavorite(restaurantId: String!): Boolean
  updateCartItem(input: UpdateCartItemInput!): CartItem
  updateCourierLocation(input: UpdateCourierLocationInput!): CourierProfile
  updateInvoiceStatus(input: UpdateInvoiceStatusInput!): Invoice
}

type Order {
  courier: User
  courierId: String
  createdAt: String!
  customer: User
  customerId: String!
  deliveryAddress: String!
  deliveryFee: String!
  estimatedDeliveryTime: String
  events: [OrderEvent]
  id: String!
  items: [OrderItem]
  orderNumber: String!
  paymentStatus: PaymentStatus!
  restaurant: Restaurant
  restaurantId: String!
  specialInstructions: String
  status: OrderStatus!
  stripePaymentIntentId: String
  stripeSessionId: String
  subtotal: String!
  tax: String!
  tip: String!
  total: String!
  updatedAt: String!
}

type OrderEvent {
  createdAt: String!
  description: String
  eventType: String!
  id: String!
  order: Order
  orderId: String!
}

type OrderItem {
  createdAt: String!
  id: String!
  menuItem: MenuItem
  menuItemId: String!
  orderId: String!
  price: String!
  quantity: Int!
  selectedOptions: String!
  specialInstructions: String
  updatedAt: String!
}

type OrderQueueUpdate {
  queueLength: Int!
  restaurantId: String!
  updatedAt: String!
}

enum OrderStatus {
  cancelled
  confirmed
  delivered
  pending
  picked_up
  preparing
  ready
}

type OrderTrackingUpdate {
  courierId: String
  message: String
  orderId: String!
  status: String!
  updatedAt: String!
}

type OrderUpdate {
  message: String
  orderId: String!
  status: String!
  updatedAt: String!
}

type PaymentIntent {
  amount: String!
  clientSecret: String!
  createdAt: String!
  currency: String!
  id: String!
  status: String!
}

enum PaymentStatus {
  failed
  paid
  pending
  refunded
}

type Payout {
  amount: String!
  createdAt: String!
  failureReason: String
  id: String!
  processedAt: String
  recipient: User
  recipientId: String!
  recipientType: String!
  restaurant: Restaurant
  status: PayoutStatus!
  stripePayoutId: String
  stripeTransferId: String
  updatedAt: String!
}

enum PayoutStatus {
  cancelled
  completed
  failed
  pending
  processing
}

input ProcessPayoutInput {
  invoiceId: String!
  stripeTransferId: String!
}

type Query {
  cart: Cart
  courierAssignments: [Delivery]!
  favoriteRestaurants: [Restaurant]!
  invoice(id: String!): Invoice
  invoices(courierId: String, limit: Int, offset: Int, restaurantId: String, status: InvoiceStatus): [Invoice]
  me: User
  merchantOrders(limit: Int, offset: Int, status: OrderStatus): [Order]!
  order(id: String!): Order
  orders(limit: Int, offset: Int, status: OrderStatus): [Order]!
  paymentIntent(paymentIntentId: String!): PaymentIntent
  payoutSummary(role: String!, userId: String!): String
  restaurant(slug: String!): Restaurant
  restaurants(cuisine: String, isOpen: Boolean, limit: Int, offset: Int, search: String, sortBy: String, sortOrder: String): [Restaurant]!
  reviews(courierId: String, limit: Int, offset: Int, restaurantId: String): [Review]!
}

type RefreshTokenResponse {
  accessToken: String!
  refreshToken: String!
}

type Refund {
  amount: String!
  createdAt: String!
  currency: String!
  id: String!
  reason: String!
  status: String!
}

input RemoveFromCartInput {
  cartItemId: String!
}

type Restaurant {
  address: Address
  addressId: String!
  createdAt: String!
  cuisine: String!
  deliveryFee: String!
  deliveryTime: Int!
  description: String
  id: ID!
  image: String
  isActive: Boolean!
  isOpen: Boolean!
  menuCategories: [MenuCategory]
  menuItems(categoryId: String, limit: Int = 50): [MenuItem]
  minimumOrder: String!
  name: String!
  owner: User
  ownerId: String!
  phone: String
  rating: String
  reviewCount: Int!
  slug: String!
  updatedAt: String!
}

type Review {
  comment: String
  courier: User
  createdAt: String!
  customer: User
  customerId: String!
  id: String!
  orderId: String!
  rating: Int!
  restaurant: Restaurant
  type: ReviewType!
  updatedAt: String!
}

enum ReviewType {
  courier
  restaurant
}

input SignupInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phone: String
  role: UserRole!
}

type Subscription {
  courierLocation(deliveryId: String!): CourierLocationUpdate
  courierStatusChanged: CourierStatusUpdate
  customerOrderTracking(orderId: String!): OrderTrackingUpdate
  deliveryAssigned(courierId: String!): DeliveryAssignment
  deliveryStatusChanged(deliveryId: String!): DeliveryStatusUpdate
  liveCourierTracking(courierId: String!): CourierTrackingUpdate
  merchantIncomingOrders(restaurantId: String!): Order
  orderStatusChanged(orderId: String!): OrderEvent
  realTimeOrderUpdates(orderId: String!): OrderUpdate
  restaurantOrderQueue(restaurantId: String!): OrderQueueUpdate
}

input UpdateCartItemInput {
  cartItemId: String!
  quantity: Int
  selectedOptions: String
  specialInstructions: String
}

input UpdateCourierLocationInput {
  latitude: Float!
  longitude: Float!
}

input UpdateCourierProfileInput {
  currentLocation: LocationInput
  isAvailable: Boolean
  licensePlate: String
  vehicleType: VehicleType
}

input UpdateInvoiceStatusInput {
  id: String!
  status: InvoiceStatus!
  stripeTransferId: String
}

input UpdateMenuCategoryInput {
  categoryId: String!
  description: String
  isActive: Boolean
  name: String
  sortOrder: Int
}

input UpdateMenuItemInput {
  description: String
  image: String
  isAvailable: Boolean
  menuItemId: String!
  name: String
  price: String
  sortOrder: Int
}

input UpdateOrderStatusInput {
  orderId: String!
  status: OrderStatus!
}

input UpdateProfileInput {
  firstName: String
  lastName: String
  phone: String
}

input UpdateRestaurantInput {
  address: AddressInput
  cuisine: String
  deliveryFee: String
  deliveryTime: Int
  description: String
  image: String
  isActive: Boolean
  isOpen: Boolean
  minimumOrder: String
  name: String
  phone: String
  restaurantId: String!
  slug: String
}

input UpdateReviewInput {
  comment: String
  rating: Int
  reviewId: String!
}

type User {
  avatar: String
  courierProfile: CourierProfile
  createdAt: String!
  email: String!
  emailVerified: Boolean!
  firstName: String!
  id: String!
  isActive: Boolean!
  lastName: String!
  phone: String
  role: UserRole!
  updatedAt: String!
}

enum UserRole {
  admin
  courier
  customer
  restaurant
}

enum VehicleType {
  bike
  car
  motorcycle
}