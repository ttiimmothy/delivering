### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Address {
  city: String!
  country: String!
  createdAt: String!
  id: ID!
  isDefault: Boolean!
  label: String!
  latitude: String
  longitude: String
  state: String!
  street: String!
  updatedAt: String!
  zipCode: String!
}

input AddressInput {
  city: String!
  country: String = "US"
  isDefault: Boolean = false
  label: String!
  latitude: String
  longitude: String
  state: String!
  street: String!
  zipCode: String!
}

type AuthResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type CourierProfile {
  createdAt: String!
  currentLocation: Location
  id: ID!
  isAvailable: Boolean!
  licensePlate: String
  rating: String
  reviewCount: Int!
  totalDeliveries: Int!
  updatedAt: String!
  vehicleType: String!
}

input CourierProfileInput {
  currentLocation: LocationInput
  isAvailable: Boolean = true
  licensePlate: String
  vehicleType: String!
}

input CreateMenuCategoryInput {
  description: String
  name: String!
  sortOrder: Int = 0
}

input CreateMenuItemInput {
  description: String
  image: String
  isAvailable: Boolean = true
  isPopular: Boolean = false
  name: String!
  price: String!
  sortOrder: Int = 0
}

input CreateRestaurantInput {
  address: RestaurantAddressInput!
  cuisine: String!
  deliveryFee: String!
  deliveryTime: Int!
  description: String!
  image: String
  minimumOrder: String!
  name: String!
  phone: String
}

type Location {
  latitude: Float!
  longitude: Float!
}

input LocationInput {
  latitude: Float!
  longitude: Float!
}

input LoginInput {
  email: String!
  password: String!
}

type MenuCategory {
  createdAt: String!
  description: String
  id: ID!
  isActive: Boolean!
  menuItems: [MenuItem]
  name: String!
  sortOrder: Int!
  updatedAt: String!
}

type MenuItem {
  category: MenuCategory
  createdAt: String!
  description: String
  id: ID!
  image: String
  isAvailable: Boolean!
  isPopular: Boolean!
  name: String!
  options: [MenuItemOption]
  price: String!
  sortOrder: Int!
  updatedAt: String!
}

type MenuItemOption {
  createdAt: String!
  id: ID!
  isRequired: Boolean!
  name: String!
  sortOrder: Int!
  type: String!
  values: [MenuItemOptionValue]
}

type MenuItemOptionValue {
  createdAt: String!
  id: ID!
  isDefault: Boolean!
  name: String!
  price: String!
  sortOrder: Int!
}

type Mutation {
  addAddress(input: AddressInput!): Address
  createRestaurant(input: CreateRestaurantInput!): Restaurant
  deleteAddress(id: String!): Boolean
  login(input: LoginInput!): AuthResponse
  loginWithGoogle(idToken: String!): AuthResponse
  logout: Boolean
  refreshToken(refreshToken: String!): RefreshTokenResponse
  setRestaurantOpen(id: String!, isOpen: Boolean!): Restaurant
  signup(input: SignupInput!): AuthResponse
  toggleFavorite(restaurantId: String!): Boolean
  updateAddress(id: String!, input: AddressInput!): Address
  updateCourierProfile(input: CourierProfileInput!): CourierProfile
  updateProfile(input: UpdateProfileInput!): User
  updateRestaurant(id: String!, input: UpdateRestaurantInput!): Restaurant
}

type Query {
  favoriteRestaurants: [Restaurant]
  me: User
  myRestaurants: [Restaurant]
  restaurant(slug: String!): Restaurant
  restaurants(cuisine: String, isOpen: Boolean, limit: Int = 20, offset: Int = 0, search: String, sortBy: String = "rating", sortOrder: String = "desc"): [Restaurant]
  user(id: String!): User
  users(limit: Int = 50, offset: Int = 0, role: String): [User]
}

type RefreshTokenResponse {
  accessToken: String!
  refreshToken: String!
}

type Restaurant {
  address: RestaurantAddress!
  createdAt: String!
  cuisine: String!
  deliveryFee: String!
  deliveryTime: Int!
  description: String
  id: ID!
  image: String
  isActive: Boolean!
  isFavorite: Boolean
  isOpen: Boolean!
  menuCategories: [MenuCategory]
  menuItems(categoryId: String, limit: Int = 50): [MenuItem]
  minimumOrder: String!
  name: String!
  owner: User
  phone: String
  rating: String
  reviewCount: Int!
  slug: String!
  updatedAt: String!
}

type RestaurantAddress {
  city: String!
  coordinates: Location
  state: String!
  street: String!
  zipCode: String!
}

input RestaurantAddressInput {
  city: String!
  coordinates: LocationInput
  state: String!
  street: String!
  zipCode: String!
}

input SignupInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phone: String
  role: UserRole = customer
}

input UpdateMenuCategoryInput {
  description: String
  isActive: Boolean
  name: String
  sortOrder: Int
}

input UpdateMenuItemInput {
  description: String
  image: String
  isAvailable: Boolean
  isPopular: Boolean
  name: String
  price: String
  sortOrder: Int
}

input UpdateProfileInput {
  avatar: String
  firstName: String
  lastName: String
  phone: String
}

input UpdateRestaurantInput {
  address: RestaurantAddressInput
  cuisine: String
  deliveryFee: String
  deliveryTime: Int
  description: String
  image: String
  isActive: Boolean
  isOpen: Boolean
  minimumOrder: String
  name: String
  phone: String
}

type User {
  addresses: [Address]
  avatar: String
  courierProfile: CourierProfile
  createdAt: String!
  email: String!
  emailVerified: Boolean!
  firstName: String
  googleId: String
  id: ID!
  isActive: Boolean!
  lastName: String
  phone: String
  role: UserRole!
  updatedAt: String!
}

enum UserRole {
  admin
  courier
  customer
  merchant
}